plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'maven-publish'
}

allprojects {
    apply plugin: 'java-library'

    group 'me.untouchedodin0.privatemines'
    version '3.1.9-SNAPSHOT'


    repositories {
        mavenCentral()

        maven { url = 'https://jitpack.io' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = "https://repo.codemc.io/repository/maven-public/" }
        maven { url = "https://maven.enginehub.org/repo/" }
        maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        maven { url = 'https://repo.onarandombox.com/content/groups/public/' }
        maven { url = 'https://hub.jeff-media.com/nexus/repository/jeff-media-public/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = "https://repo.dmulloy2.net/repository/public/" }
        maven { url = "https://repo.citizensnpcs.co/everything/" }
        maven { url = "https://repo.inventivetalent.org/content/repositories/releases/" }
        maven {
            name = "PaperMC"
            url = uri("https://papermc.io/repo/repository/maven-public/")
        }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:22.0.0' // none of these have runtime retention lol

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    test {
        useJUnitPlatform()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    dependencies {
        compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        compileOnly 'me.clip:placeholderapi:2.10.9'
        compileOnly 'com.google.code.gson:gson:2.8.5'
        compileOnly 'com.github.MilkBowl:VaultAPI:1.7.1'
        compileOnly 'net.citizensnpcs:citizensapi:2.0.29-SNAPSHOT'
        compileOnly "net.kyori:adventure-text-minimessage:4.1.0-SNAPSHOT"
        compileOnly 'com.github.retrooper.packetevents:spigot:2.0-SNAPSHOT'

//        compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.8-SNAPSHOT'

        implementation 'org.codemc.worldguardwrapper:worldguardwrapper:1.2.0-SNAPSHOT'
        implementation 'com.github.cryptomorin:XSeries:8.6.1'
        implementation 'com.github.Redempt:RedLib:6.5.1.8'
        implementation 'de.jeff_media:SpigotUpdateChecker:1.3.2'
        implementation 'org.bstats:bstats-bukkit:3.0.0'

//        implementation files('libs/packetevents-api.jar') // (Default) https://github.com/retrooper/packetevents/actions/runs/1942337314

        compileOnly files('libs/AutoSellAPI.jar')
        compileOnly files('libs/UltraPrisonCore.jar')
        compileOnly files('libs/RevAutoSell.jar')
    }

    shadowJar {
        relocate 'org.codemc.worldguardwrapper', 'me.untouchedodin0.privatemines.worldguardwrapper'
        relocate 'de.jeff_media.updatechecker', 'me.untouchedodin0.privatemines.updatechecker'
        relocate 'org.bstats', 'me.untouchedodin0.privatemines.bstats'
    }

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://repo.bristermitten.me/repository/maven-releases"
                def snapshotsRepoUrl = "https://repo.bristermitten.me/repository/maven-snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = System.getenv('MAVEN_USER')
                    password = System.getenv('MAVEN_PASSWORD')
                }
            }
        }
        publications {
//        shadow(MavenPublication) {
//            publication -> project.shadow.component(publication)
//        }
            mavenJava(MavenPublication) {
                from components.java
//                artifact sourceJar
            }
        }
    }
}

dependencies {
    subprojects.forEach(project -> implementation(project))
}

shadowJar {
    relocate 'org.codemc.worldguardwrapper', 'me.untouchedodin0.privatemines.worldguardwrapper'
    relocate 'de.jeff_media.updatechecker', 'me.untouchedodin0.privatemines.updatechecker'
}


task copyTo1_8Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.8.8 Private Mines/plugins"
}

task copyTo1_12Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.12.2 Private Mines/plugins"
}

task copyTo1_16Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.16.5 Paper/plugins"
}

task copyTo1_17Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.17 - Paper (pmines rewrite)/plugins"
}

task copyTo_18Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.18 Spigot/plugins"
}

task copyTo_18Paper(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.18 Private Mines (Paper)/plugins"
}

task copyTo_DevServer(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Projects/PrivateMinesOOP/server/plugins"
}

task updateJars {
    if (!new File("E:/Coding").exists()) {
        return
    }

    dependsOn copyTo1_8Server
    dependsOn copyTo1_12Server
    dependsOn copyTo1_16Server
    dependsOn copyTo1_17Server
    dependsOn copyTo_18Server
    dependsOn copyTo_18Paper
    dependsOn copyTo_DevServer
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

// Publishes the code to mavenLocal

